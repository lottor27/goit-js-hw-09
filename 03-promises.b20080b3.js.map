{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAGMC,GADOC,SAASC,cAAc,SAClBD,SAASC,cAAc,0BACnCC,EAAaF,SAASC,cAAc,kBACpCE,EAAYH,SAASC,cAAc,iBACnCG,EAAcJ,SAASC,cAAc,mBAG3CF,EAAUM,iBAAiB,SAI3B,SAAkBC,G,kBAcZC,YAAW,WAcjB,IAAiCC,EACzBC,IAAgBC,KAAKC,SAAW,GACtB,IAAIC,SAAQ,SAACC,EAASC,GACpCP,YAAW,WACLE,GACFI,EAAQ,QAEVC,EAAO,M,GACN,GAASC,OAANP,G,IAELQ,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MACjBC,EAAAvB,GAASwB,OAAOC,QAAQ,uBAAwCP,OAAfG,EAAS,QAAYH,OAANI,EAAM,M,IAEvEI,OAAM,SAAAN,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MAClBC,EAAAvB,GAASwB,OAAOG,QAAQ,sBAAuCT,OAAfG,EAAS,QAAYH,OAANI,EAAM,M,IA1BnEM,QAAQC,IAAIC,E,GAEX,GAASZ,OAANI,IACLA,GAAS,GAAcJ,OAAXa,E,EAlBjBtB,EAAMuB,iBAEN,IAAMC,EAAa5B,EAAW6B,MACxBH,EAAazB,EAAU4B,MACvBb,EAAWd,EAAY2B,MAE7BN,QAAQC,IAAII,GAEZL,QAAQC,IAAIR,GAIV,IAFF,IAAIC,EAAQW,EAEDE,EAAI,EAAGA,GAAKd,EAAUc,GAAK,EAACC,EAAAD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst bntSubmit = document.querySelector('button[type=\"submit\"]');\nconst delayInput = document.querySelector('[name=\"delay\"]');\nconst stepInput = document.querySelector('[name=\"step\"]');\nconst amountInput = document.querySelector('[name=\"amount\"]');\n\n\nbntSubmit.addEventListener(\"click\", onSubmit);\n\n  \n\nfunction onSubmit(event) {\n  event.preventDefault();\n\n  const firstDelay = delayInput.value;\n  const inputDelay = stepInput.value;\n  const position = amountInput.value;\n  \n  console.log(firstDelay);\n  // console.log(delay);\n  console.log(position);\n  \n  let delay = firstDelay;\n\n    for (let i = 0; i <= position; i += 1) {\n      setTimeout(() => {\n        createPromise();\n        console.log(i);\n       \n      }, `${delay}`);\n       delay += `${inputDelay}`;\n      // \n    }\n    // const timerId = setTimeout(conter, `${firstDelay}`);\n\n\n}\n    \n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve('Good');\n      }\n      reject('Bad');\n    }, `${delay}`);\n  })\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n};\n\n\n// createPromise(2, 1500)\n  \n\n//  const conter = () => {\n//     for (let i = 0; i < position; i++) {\n//       console.log(i);\n//       createPromise(position, delay);\n//     }\n//     console.log('Конец работы');\n//   }\n//   const timerId = setTimeout(conter, `${firstDelay}`);\n\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$bntSubmit","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","addEventListener","event","setTimeout","delay1","shouldResolve","Math","random","Promise","resolve","reject","concat","then","param","position","delay","$parcel$interopDefault","Notify","success","catch","failure","console","log","i","inputDelay","preventDefault","firstDelay","value","i1","_loop"],"version":3,"file":"03-promises.b20080b3.js.map"}