{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAE9BC,GADYF,SAASC,cAAc,yBACtBD,SAASC,cAAc,mBACpCE,EAAYH,SAASC,cAAc,iBACnCG,EAAcJ,SAASC,cAAc,mBAkC3C,SAASI,EAAcC,EAAQC,GAC7B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,OAAEH,E,MAAQC,IAElBG,EAAO,C,OAAEJ,E,MAAQC,GAAQ,GAE1BA,EAAM,G,CAxCbR,EAAKgB,iBAAiB,UAItB,SAAkBC,GAChBA,EAAMC,iBAEN,MAAMC,EAAahB,EAAWiB,MACxBC,EAAajB,EAAUgB,MACvBb,EAASF,EAAYe,MAE3BE,QAAQC,IAAIJ,GACZG,QAAQC,IAAIF,GACZC,QAAQC,IAAIhB,GAEZ,IAAK,IAAIiB,EAAI,EAAGA,GAAKjB,EAAQiB,GAAK,EAAG,CACnC,IAAIC,EAAQC,OAAOF,GAAI,KAAIH,MAAiBK,OAAOL,GACnCf,EAAcC,EAAQkB,GAEnCE,MAAK,EAACC,SAAEA,EAAQpB,MAAEA,MACjBqB,EAAA/B,GAASgC,OAAOC,QAAQ,qBAAqBH,QAAepB,OAAW,IAExEwB,OAAM,EAACJ,SAAEA,EAAQpB,MAAEA,MAClBqB,EAAA/B,GAASgC,OAAOG,QAAQ,oBAAoBL,QAAepB,OAAW,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst bntSubmit = document.querySelector('button[type=\"submit\"]');\nconst delayInput = document.querySelector('[name=\"delay\"]');\nconst stepInput = document.querySelector('[name=\"step\"]');\nconst amountInput = document.querySelector('[name=\"amount\"]');\n\n\nform.addEventListener('submit', onSubmit);\n\n// bntSubmit.setAttribute('disabled', 'disabled');  \n\nfunction onSubmit(event) {\n  event.preventDefault();\n\n  const firstDelay = delayInput.value;\n  const inputDelay = stepInput.value;\n  const amount = amountInput.value;\n\n  console.log(firstDelay);\n  console.log(inputDelay);\n  console.log(amount);\n\n  for (let i = 1; i <= amount; i += 1) {\n    let delay = Number(i * `${+inputDelay}`) + +Number(inputDelay); \n    const promise = createPromise(amount, delay);\n    promise\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay} ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay} ms`);\n      });\n  }\n\n\n\n\n}\nfunction createPromise(amount, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ amount, delay });\n      } else {\n        reject({ amount, delay });\n      }\n    }, delay);\n  });\n}\n\n \n\n\n\n// createPromise(2, 1500)\n  \n\n//  const conter = () => {\n//     for (let i = 0; i < position; i++) {\n//       console.log(i);\n//       createPromise(position, delay);\n//     }\n//     console.log('Конец работы');\n//   }\n//   const timerId = setTimeout(conter, `${firstDelay}`);\n\n\n  // for (let i = 0; i <= position; i += 1) {\n    //   setTimeout(() => {\n    //     createPromise();\n    //     console.log(i);\n       \n    //   }, `${delay}`);\n    //    delay += inputDelay;\n    //   // \n    // }\n   "],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$delayInput","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$amountInput","$47d4ff9957288465$var$createPromise","amount","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","firstDelay","value","inputDelay","console","log","i","delay1","Number","then","position","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.cc66d8f2.js.map"}