{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAE9BC,GADYF,SAASC,cAAc,yBACtBD,SAASC,cAAc,mBACpCE,EAAYH,SAASC,cAAc,iBACnCG,EAAcJ,SAASC,cAAc,mBAG3CF,EAAKM,iBAAiB,UAItB,SAAkBC,G,kBAQd,IAAIC,EAAQC,OAAOC,EAAIC,GAAcF,OAAOE,GAEtCC,EAeV,SAAuBC,EAAQC,GAC7B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,SAAQC,UAElBG,EAAO,CAAEJ,SAAQC,S,GAElBA,E,IAxBaQ,CAAcT,EAAQL,GAEtCI,EACGW,MAAK,SAAAC,GAASA,EAANX,O,IAAQC,EAAKU,EAALV,MACfW,EAAA3B,GAAS4B,OAAOC,QAAQ,qBAA6BC,OAARlB,EAAE,QAAYkB,OAANd,EAAM,O,IAE5De,OAAM,SAAAL,GAASA,EAANX,O,IAAQC,EAAKU,EAALV,MAChBW,EAAA3B,GAAS4B,OAAOI,QAAQ,oBAA4BF,OAARlB,EAAE,QAAYkB,OAANd,EAAM,O,KAhBhEP,EAAMwB,iBAEa5B,EAAW6B,MAI9B,IAJA,IACMrB,EAAaP,EAAU4B,MACvBnB,EAASR,EAAY2B,MAElBC,EAAI,EAAGA,GAAKpB,EAAQoB,GAAK,EAACC,EAAAD,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst bntSubmit = document.querySelector('button[type=\"submit\"]');\nconst delayInput = document.querySelector('[name=\"delay\"]');\nconst stepInput = document.querySelector('[name=\"step\"]');\nconst amountInput = document.querySelector('[name=\"amount\"]');\n\n\nform.addEventListener('submit', onSubmit);\n\n// bntSubmit.setAttribute('disabled', 'disabled');  \n\nfunction onSubmit(event) {\n  event.preventDefault();\n\n  const firstDelay = delayInput.value;\n  const inputDelay = stepInput.value;\n  const amount = amountInput.value;\nlet delay = firstDelay;\n  for (let i = 1; i <= amount; i += 1) {\n    let delay = Number(i * inputDelay) + Number(inputDelay); \n\n    const promise = createPromise(amount, delay);\n\n    promise\n      .then(({ amount, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${i} in ${delay} ms`);\n      })\n      .catch(({ amount, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${i} in ${delay} ms`);\n      });\n  }\n\n\n\n\n}\nfunction createPromise(amount, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ amount, delay });\n      } else {\n        reject({ amount, delay });\n      }\n    }, delay);\n  });\n}\n\n "],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","addEventListener","event","delay2","Number","i","inputDelay","promise","amount","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$ce04d3a99e08e73b$var$createPromise","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","preventDefault","value","i1","_loop"],"version":3,"file":"03-promises.d7ae7bf4.js.map"}